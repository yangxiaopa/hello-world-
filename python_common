浮点数间的运算存在不确定尾数（不确定尾数一般发生在十进制数的10^-16位左右），不是bug
浮点数1.1 的小数部分由53位二进制来表示，约10^-16, 计算机二进制与十进制间不存在对等关系，只能截取53位二进制数来无限接近0.1但不同
round(x,d)  #对x四舍五入，d是小数截取位数，浮点数间运算及比较可用round函数辅助
------------------------------------------------------------------------
复数类型
z.real
z.image
------------
数值运算操作符
+ - * /（除，10/3=3.3333...） //（#整数除，10//3=3） %（#余数，10%3=1） ** （#幂运算，x**y=x^y）
--------------------------------------------------------------------------------------------
数值函数
abs(x)
divmod(x,y) #商余（x//y,x%y),同时输出商余 divmod(10,3)=(3,1)
pow(x,y[z]) #幂余，（x**y）%z []表示参数z可省略
round(x,[d]) #四舍五入，d是保留小数位数，默认值为0 round（-10.123,2)=-10.12
max()
min()
int(x)  #将x变为整数，舍弃小数部分
float(x) #将x变成浮点数，增加小数部分
complex(x) #将整数变为复数，增加虚部
-----------------------------------
TEMSTR[M:N:K] #对字符串TEMSTR切片操作，M为开头，N为结尾，k为步长 
[:N]  #从开头到N-1
[M:]  #从M至结尾
[::-1] #将字符前后颠倒
----------------------------
转义符\     \b #回退   \n #换行，光标移到下行首    \r #回车，将光标移到本行首
----------------------------------------------------------------------------
x in s #如果x是s的字串，返回 true  
len(x) #返回字符串的长度
str(x) #任意类型x所对应的字符串形式
chr(x) #x为Unicode编码，返回对应的字符     ord(x) #x为字符，返回对应的unicode编码
-------------------------------------------------------------------------------
字符串的处理
str.lower()  str.upper()   #返回字符串的副本，全部字符小写/大写   'yangxiaopa'.upper() 结果为 YANGXIAOPA
str.split(sep=none) #返回一列表,由str根据sep被分隔的部分组成    'A,B,C'.split(',') 结果为 ['A', 'B', 'C']
str.count(sub)  #返回字串sub在str中出现的次数                  'yangxiaopa'.count('a') 结果为 3
str.replace(old,new) #将字符串str副本，所有old替换为new        'YANGxiaopa'.replace('xiaopa','XIAOPA') 结果为 YANGXIAOPA
str.center(width,[fillchar])  #字符串根据宽度width居中，fillchar可选  'yangxiaopa'.center(20,'-')      结果为 -----yangxiaopa-----   
str.strip(char)             #从str中去掉其左侧和右侧chars中列出的字符   'yangxiaopa'.strip('a')   结果为 yangxiaop
str.join(iter)              #在iter变量除最后元素外每个元素后增加一个str ','.join('yangxiaopa')   结果为 y,a,n,g,x,i,a,o,p,a
--------------------------------------------------------------------------------------------------------------------------
字符串的格式化
print('{}:计算机{}的cpu占用率为{}%'.format('2018-12-01','f',12))   #字符串中槽{}的默认顺序与format()中参数的顺序一致   结果为 
                                                                    2018-12-01:计算机f的cpu占用率为12%
{0:=^20,.2f}    # :为引导符号，=为填充字符，^居中对齐，20槽宽度为20 ,数字的千位分隔符 .2f保留浮点数小数的精度 
---------------------------------------------------------------------------------------------------------
文本进度条
import time
scale = 10 
print('-----执行开始-----')
for i in range(scale + 1):
    a = '*' * i
    b = '.' * (scale - i)
    c = (i/scale) * 100
    print('{:^3.0f}%[{}->{}]' .format(c,a,b))
    time.sleep(0.1)
print('-----执行结束-----')
------------------------------------------
单行刷新：本质为用后打印的字符覆盖之前的字符，不能换行，print()需要被控制. 要能回退，打印后的光标退回到之前位子 \r
import time 
for i in range(101):
    print('\r{:3}%'.format(i), end='')     # ,end('') 为不换行功能     \r 将光标退回行首
    time.sleep(0.1)
--------------------------------
进度条
import time 
scale = 50
print('\n'+'执行开始'.center(scale//2, '-'))
start = time.perf_counter()
for i in range(scale + 1):
    a = '*' * i
    b = '-' * (scale - i)
    c = (i/scale) * 100
    dur = time.perf_counter() - start
    print('\r{:^3.0f}%[{}-->>>{}{:.2f}s]'.format(c,a,b,dur), end='')
    time.sleep(0.1)
print('\n'+'执行结果'.center(scale//2,'-'))   
-------------------------------------------
perf_counter()  #文本进度条程序使用perf_counter()计时，统计比较各算法的时间
-----------------------
weekStr = "一二三四五六天"
weekId = eval(input('请输入数字（1-7）：'))
print('星期' + weekStr[weekId - 1])
-------------------------------------
dayup = 1.0
dayfactor = 0.01
for i in range(365):
    if i % 7 in [6,0]:
        dayup = dayup * (1 - dayfactor)
    else:
        dayup = dayup * (1 + dayfactor)
print("工作日的力量: {:.2f}".format(dayup)) 
------------------------------------------
#TempConvert.py
TempStr = input("请输入带有符号的温度值：")
if  TempStr[-1] in ['F', 'f']:            #TempStr[-1]索引字符串的最后一个字符
    C = (eval(TempStr[0:-1]) - 32)/1.8    #TempStr[0:-1]切片字符串从0到最后一个字符但不包括最后一个字符的字符串
    print("转换后的温度是{:.2f}C".format(C))
elif TempStr[-1] in ['C', 'c']:
    F = 1.8*eval(TempStr[0:-1]) + 32
    print("转换后的温度是{:.2f}F".format(F))
else:
    print("输入格式有误") 
---------------------------
import turtle as T
#T.setup(650, 350, 200, 200)  #窗体的宽高及位子
T.setup(650,350,200,200)
T.penup()         
T.fd(-250)
T.pendown()             #将画笔由绘图中心的原点向左移动250个像素距离
T.pensize(25)
T.pencolor('purple')
T.seth(-40)           #seth(angle)改变海龟行进方向
for i in range(4):
    T.circle(40, 80)
    T.circle(-40, 80)       #T.circle(r,angle)         
T.circle(40, 40)
T.fd(40)
T.circle(16, 180)
T.fd(40 * 2/3)
T.circle(-100,90)
T.done()        
--------------------

----------------------------------
def dayup(df):
    dayup = 1
    for i in range(365):
        if i % 7 in [6,0]:
            dayup = dayup * (1 - 0.01)
        else:
            dayup = dayup * (1 + df)
    return dayup
dayfactor = 0.01
while dayup(dayfactor) < 37.78:
    dayfactor += 0.001
print('工作日的努力参数是：{:.3f}'  .format(dayfactor))
------------------------------------------------------
程序的分支结构
******单分支结构******
******二分支结构******
guss = eval(input('请输入>>>'))
if guss == 99:
    print('猜对了')
else:
    print('猜错了')
-----------------------
and not or  逻辑组合
-----------------------
异常处理
try:
  <语句块1>
except: <异常类型>:
  <语句块2>  
-------------------
print('体脂数BMI:{:-^20.3f}'.format(75/pow(1.65,2)))
    体脂数BMI:-------27.548------- 
-------------------------------------------------------------------------   
height, weight = eval(input('请输入身高(米)和体重(千克)[height, weight]:'))
BMI = weight / pow(height, 2)
print('BMI指数为：{:.2f}'.format(BMI))
who, nat = '', ''
if BMI < 18.5:
    who, nat = '偏瘦', '偏瘦'
elif 18.5 <= BMI < 24:
    who, nat = '正常', '正常'
elif 24 <= BMI < 25:
    who, nat = '正常', '偏胖'   
elif 25 <= BMI < 28:
    who, nat = '偏胖', '偏胖'
elif 28 <= BMI < 30:
    who, nat = '偏胖', '偏胖'
else:
    who, nat = '偏胖', '偏胖'
print("BMI指标为：国际：'{0}', 国内：'{1}'".format(who, nat))
-------------------------------------------------------------
******遍历循环******
for……in……
----------------
无限循环语句
a = 3
while a > 0:
    a = a - 1
    print(a)
2
1
0 
------
循环控制保留字
break   #跳出并结束当前整个循环，执行循环后语句
continue  #结束当次循环，继续执行后续循环
for i in 'python':
    if i == 't':
        continue
    print(i, end='')
结果为：pyhon
******
for i in 'python':
    if i == 't':
        break
    print(i, end='')
结果为：py
-----------
s = 'python'
while s != '':
    for c in s:
        print(c, end='')
    s = s[:-1]           #取字符串s的前一部分
结果为：pythonpythopythpytpyp
-----------------------------
循环的扩展
循环与else   #else语句作为“正常”完成循环的奖励，若有break则不执行else语句
for …… in ……
    语句1
else    
    语句2
---
while 条件：
    语句1
else：
    语句2
--------------
random库概述
随机数种子--->梅森旋转算法--->随机序列
random.seed(10) #产生种子10对应的序列
random.random() #生成一个0-1之间的随机数
扩展随机函数
randint(a,b) #生成一个[a,b]之间的整数 
randrange(m,n[,k]) #生成一个[m,n]之间以k为步长的随机整数
getrandbits(k) #生成一个k比特长度的随机数
uniform(a,b) #生成一个[a,b]之间的随机小数
random.choice(seq) #从序列seq中随机选择一个元素
random.shuffle(s) #将序列seq中元素随机排列，返回打乱后的序列
----------------------------------------------------------
pi = 0
N = 100
for k in range(N):
    pi += 1/pow(16,k)*(4/(8*k+1)-2/(8*k+4)-1/(8*k+5)-1/(8*k+6))
print('圆周率值为：{}'.format(pi))

import random
import time
DARTS = 1000*1000
hits = 0
start = time.perf_counter()
for i in range(1,DARTS +1):
    x,y = random.random(), random.random()
    dist = pow(x**2 + y**2, 0.5)
    if dist <= 1.0:
        hits = hits + 1
pi = 4 * (hits/DARTS)
print('圆周率值为：{},计算时间为{}'.format(pi,time.perf_counter()-start))
------------------------------------------------------------------------
 






























